# Checking the btparser. -*- Autotest -*-

AT_BANNER([Java exception])

## ---------------------- ##
## btp_java_exception_cmp ##
## ---------------------- ##
AT_TESTFUN([btp_java_exception_cmp],
[[
#include <lib/java_exception.h>
#include <lib/java_frame.h>
#include <lib/location.h>
#include <lib/utils.h>
#include <assert.h>
#include <stdlib.h>

int
main(void)
{
  /* Basic test. */
  struct btp_java_frame frame0, frame1, frame2, frame3, frame4;
  btp_java_frame_init(&frame0);
  frame0.file_name = "SimpleTest.java";
  frame0.file_line = 36;
  frame0.name = "SimpleTest.throwNullPointerException";
  frame0.next = &frame1;

  btp_java_frame_init(&frame1);
  frame1.file_name = "SimpleTest.java";
  frame1.file_line = 70;
  frame1.name = "SimpleTest.throwAndDontCatchException";
  frame1.next = &frame2;

  btp_java_frame_init(&frame2);
  frame2.file_name = "SimpleTest.java";
  frame2.file_line = 82;
  frame2.name = "SimpleTest.main";

  btp_java_frame_init(&frame3);
  frame3.file_name = "Test.java";
  frame3.file_line = 7;
  frame3.name = "SimpleTest.execute";
  frame3.next = &frame4;

  btp_java_frame_init(&frame4);
  frame4.file_name = "Test.java";
  frame4.file_line = 2;
  frame4.name = "SimpleTest.intercept";

  struct btp_java_exception exception0, exception1;
  btp_java_exception_init(&exception0);
  exception0.name = "java.lang.NullPointerException";
  exception0.message = "null";
  exception0.frames = &frame0;
  exception0.inner = &exception1;

  btp_java_exception_init(&exception1);
  exception1.name = "java.lang.NullPointerException";
  exception1.message = "null";
  exception1.frames = &frame3;

  assert(0 == btp_java_exception_cmp(&exception0, &exception0, false));
  assert(0 == btp_java_exception_cmp(&exception0, &exception0, true));

  assert(0 == btp_java_exception_cmp(&exception1, &exception1, false));
  assert(0 == btp_java_exception_cmp(&exception1, &exception1, true));

  assert(0 != btp_java_exception_cmp(&exception1, &exception0, false));
  assert(0 != btp_java_exception_cmp(&exception1, &exception0, true));

  assert(0 != btp_java_exception_cmp(&exception0, &exception1, false));
  assert(0 != btp_java_exception_cmp(&exception0, &exception1, true));

  return 0;
}
]])

## ---------------------- ##
## btp_java_exception_dup ##
## ---------------------- ##
AT_TESTFUN([btp_java_exception_dup],
[[
#include <lib/java_exception.h>
#include <lib/java_frame.h>
#include <lib/location.h>
#include <lib/utils.h>
#include <assert.h>
#include <stdlib.h>

int
main(void)
{
  /* Basic test. */
  struct btp_java_frame frame0, frame1, frame2, frame3, frame4;
  btp_java_frame_init(&frame0);
  frame0.file_name = "SimpleTest.java";
  frame0.file_line = 36;
  frame0.name = "SimpleTest.throwNullPointerException";
  frame0.next = &frame1;

  btp_java_frame_init(&frame1);
  frame1.file_name = "SimpleTest.java";
  frame1.file_line = 70;
  frame1.name = "SimpleTest.throwAndDontCatchException";
  frame1.next = &frame2;

  btp_java_frame_init(&frame2);
  frame2.file_name = "SimpleTest.java";
  frame2.file_line = 82;
  frame2.name = "SimpleTest.main";

  btp_java_frame_init(&frame3);
  frame3.file_name = "Test.java";
  frame3.file_line = 7;
  frame3.name = "SimpleTest.execute";
  frame3.next = &frame4;

  btp_java_frame_init(&frame4);
  frame4.file_name = "Test.java";
  frame4.file_line = 2;
  frame4.name = "SimpleTest.intercept";

  struct btp_java_exception exception0, exception1;
  btp_java_exception_init(&exception0);
  exception0.name = "java.lang.NullPointerException";
  exception0.message = "null";
  exception0.frames = &frame0;
  exception0.inner = &exception1;

  btp_java_exception_init(&exception1);
  exception1.name = "java.lang.NullPointerException";
  exception1.message = "null";
  exception1.frames = &frame3;

  struct btp_java_exception *dup0 = btp_java_exception_dup(&exception0, false);
  assert(NULL == dup0->inner);
  assert(0 == btp_java_exception_cmp(&exception0, dup0, false));

  struct btp_java_exception *dup_deep0 = btp_java_exception_dup(&exception0, true);
  assert(NULL != dup_deep0->inner);
  assert(0 == btp_java_exception_cmp(&exception0, dup_deep0, true));
  assert(0 == btp_java_exception_cmp(&exception1, dup_deep0->inner, false));
  assert(0 == btp_java_exception_cmp(&exception1, dup_deep0->inner, true));

  return 0;
}
]])

## -------------------------------- ##
## btp_java_exception_append_to_str ##
## -------------------------------- ##
AT_TESTFUN([btp_java_exception_append_to_str],
[[
#include <lib/java_exception.h>
#include <lib/java_frame.h>
#include <lib/utils.h>
#include <lib/strbuf.h>
#include <assert.h>
#include <stdlib.h>

#include <tests/java_testcases.c>

int
main(void)
{
  struct btp_java_exception exception;
  btp_java_exception_init(&exception);
  exception.name = "java.Exception";
  exception.message = "whatever";
  exception.frames = create_real_stacktrace_bottom();

  struct btp_strbuf *buf = btp_strbuf_new();
  btp_java_exception_append_to_str(&exception, buf);

  struct btp_strbuf *expected = btp_strbuf_new();
  btp_strbuf_append_str(expected, "java.Exception: whatever\n");
  btp_java_frame_append_to_str(exception.frames, expected);
  btp_strbuf_append_char(expected, '\n');

  printf(
"<==============================================================================>\n"
"'%s'\n==\n'%s'\n"
"<==============================================================================>\n",
  expected->buf, buf->buf);

  assert(0 == strcmp(buf->buf, expected->buf));

  return 0;
}
]])
