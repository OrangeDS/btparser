# Checking the btparser. -*- Autotest -*-

AT_BANNER([Java stacktrace])

## ----------------------- ##
## btp_java_stacktrace_cmp ##
## ----------------------- ##
AT_TESTFUN([btp_java_stacktrace_cmp],
[[
#include <lib/java_stacktrace.h>
#include <lib/java_thread.h>
#include <lib/java_frame.h>
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

#include <tests/java_testcases.c>

int
main(void)
{
  struct btp_java_stacktrace *stacktrace0 = btp_java_stacktrace_new();
  stacktrace0->threads = create_real_main_thread_objects();

  struct btp_java_stacktrace *stacktrace1 = btp_java_stacktrace_new();
  stacktrace1->threads = create_real_main_thread_objects();

  assert(0 == btp_java_stacktrace_cmp(stacktrace0, stacktrace1));

  btp_java_thread_free(stacktrace1->threads);
  stacktrace1->threads = NULL;

  assert(0 != btp_java_stacktrace_cmp(stacktrace0, stacktrace1));

  btp_java_stacktrace_free(stacktrace0);
  btp_java_stacktrace_free(stacktrace1);

  return 0;
}
]])

## ----------------------- ##
## btp_java_stacktrace_dup ##
## ----------------------- ##
AT_TESTFUN([btp_java_stacktrace_dup],
[[
#include <lib/java_stacktrace.h>
#include <lib/java_thread.h>
#include <lib/java_frame.h>
#include <lib/location.h>
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

#include <tests/java_testcases.c>

int
main(void)
{
  struct btp_java_stacktrace *stacktrace0 = create_real_main_thread_objects();
  stacktrace0->threads = create_real_main_thread_objects();

  struct btp_java_stacktrace *stacktrace1 = btp_java_stacktrace_dup(stacktrace0);

  assert(0 == btp_java_stacktrace_cmp(stacktrace0, stacktrace1));

  btp_java_stacktrace_free(stacktrace0);
  btp_java_stacktrace_free(stacktrace1);

  return 0;
}
]])

## ------------------------- ##
## btp_java_stacktrace_parse ##
## ------------------------- ##
AT_TESTFUN([btp_java_stacktrace_parse],
[[
#include <lib/java_stacktrace.h>
#include <lib/java_thread.h>
#include <lib/java_frame.h>
#include <lib/location.h>
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

#include <tests/java_testcases.c>

static void
check(char *input,
      struct btp_java_stacktrace *expected_stacktrace)
{
  printf("===============================================\n"
         "Testing input:\n%s", input);

  char *old_input = input;
  struct btp_location location;
  btp_location_init(&location);
  struct btp_java_stacktrace *stacktrace = btp_java_stacktrace_parse(&input, &location);
  assert(!expected_stacktrace || stacktrace);
  if (stacktrace)
  {
    assert(*input == '\0');
    assert(0 == btp_java_stacktrace_cmp(stacktrace, expected_stacktrace));
    btp_java_stacktrace_free(stacktrace);
  }
  else
  {
    /* Check that the pointer is not moved. */
    assert(old_input == input);
    assert(!expected_stacktrace);
  }
}

int
main(void)
{
  struct btp_java_stacktrace *stacktrace0 = create_real_main_thread_objects();
  stacktrace0->threads = create_real_main_thread_objects();

  check(get_real_thread_stacktrace(), stacktrace0);

  return 0;
}
]])
